#!/usr/bin/env bash

# Filename:      htmlizer
# Description:   Exports source code to html files.
# Maintainer:    Jeremy Cantrell <jmcantrell@gmail.com>
# Last Modified: Wed 2010-12-01 16:00:40 (-0500)

# I needed a way to convert a bunch of source code into HTML for use in my
# website. Along with crontab, this gets me there.

# IMPORTS {{{1

source bashful-execute
source bashful-messages
source bashful-modes
source bashful-profile

# VARIABLES {{{1

SCRIPT_NAME=$(basename "$0" .sh)
SCRIPT_USAGE="Converts source code files to HTML."
SCRIPT_OPTIONS="
-C DIRECTORY    Use DIRECTORY for configuration.

-P PROFILE      Use PROFILE for action.
-N              Create new profile.
-L              List profiles.
-D              Delete profile.
-E              Edit profile.
"

interactive ${INTERACTIVE:-0}
verbose     ${VERBOSE:-0}

# PROFILE OPTIONS {{{1

PROFILE_DEFAULT="
directory=~/public_html/files
file=~/code/project/script
# colorscheme=pablo
# dark=1
# filetype=python
# folding=1
# light=1
# norc=1
# numbered=1
# tabstop=4
# tidy=1
"

profile_init || die "Could not initialize profiles."

# COMMAND-LINE OPTIONS {{{1

unset OPTIND
while getopts ":hifvqC:P:NLDE" option; do
    case $option in
        C) CONFIG_DIR=$OPTARG ;;

        P) PROFILE=$OPTARG ;;
        N) PROFILE_ACTION=create ;;
        L) PROFILE_ACTION=list ;;
        D) PROFILE_ACTION=delete ;;
        E) PROFILE_ACTION=edit ;;

        i) interactive 1 ;;
        f) interactive 0 ;;

        v) verbose 1 ;;
        q) verbose 0 ;;

        h) usage 0 ;;
        *) usage 1 ;;
    esac
done && shift $(($OPTIND - 1))

# PROFILE ACTIONS {{{1

if [[ $PROFILE_ACTION ]]; then
    if ! profile_$PROFILE_ACTION; then
        die "Could not $PROFILE_ACTION profile(s)."
    fi
    exit 0
fi

# PROFILE CONTENT ACTIONS {{{1

OIFS=$IFS; IFS=$'\n'
for PROFILE in $(profile_list "$PROFILE"); do
    IFS=$OIFS

    if ! profile_load; then
        error "Could not load profile '$PROFILE'."
        continue
    fi

    mkdir -p "$directory"
    html_file=$directory/${file##*/}.html

    info -c "$file => $html_file"

    execute_push vim2html -v

    [[ $light       ]] && execute_push -l
    [[ $dark        ]] && execute_push -d
    [[ $filetype    ]] && execute_push -t $filetype
    [[ $folding     ]] && execute_push -f
    [[ $colorscheme ]] && execute_push -c $colorscheme
    [[ $norc        ]] && execute_push -x
    [[ $numbered    ]] && execute_push -n
    [[ $tabstop     ]] && execute_push -s $tabstop
    [[ $tidy        ]] && execute_push -T

    execute "$file" "$html_file"
done
